pipeline {
    agent { label 'linux-master' }

    environment {
        MAX_RECURSIVE_COUNT = '5'
    }

    stages {
        stage('Run Tests') {
            steps {
                script {
                    // Check if the current recursive count is less than the maximum allowed
                    def recursiveCount = env.RECURSIVE_COUNT ?: 0
                    if (recursiveCount.toInteger() < env.MAX_RECURSIVE_COUNT.toInteger()) {
                        // Increment the recursive count
                        recursiveCount += 1
                        env.RECURSIVE_COUNT = recursiveCount.toString()

                        def testResults = ['failure', 'failure', 'failure', 'success', 'success', 'success', 'failure', 'failure', 'success', 'success']
                        println(testResults)

                        // Generate the report
                        def totalCycles = 10
                        def failCycles = testResults.count { it == 'failure' }
                        def passRate = (totalCycles - failCycles) * 100 / totalCycles

                        // Generate the HTML body for the email
                        def emailBody = """
                            <table>
                              <caption>Pass Rate Overview</caption>
                              <thead>
                                <tr>
                                  <th></th>
                                  <th scope="col">PT Stability</th>
                                </tr>
                              </thead>
                              <tbody>
                                <tr>
                                  <th scope="row">Test Cycles</th>
                                  <td>${totalCycles}</td>
                                </tr>
                                <tr>
                                  <th scope="row">Fail Cycles</th>
                                  <td>${failCycles}</td>
                                </tr>
                                <tr>
                                  <th scope="row">Pass Rate</th>
                                  <td>${passRate}%</td>
                                </tr>
                              </tbody>
                            </table>
                            <table style='text-align: center;'>
                              <caption>PT Stability</caption>
                              <thead>
                                <tr>
                                  <th></th>
                                  <th scope="col"> Cycle1 </th>
                                  <th scope="col"> Cycle2 </th>
                                  <th scope="col"> Cycle3 </th>
                                  <th scope="col"> Cycle4 </th>
                                  <th scope="col"> Cycle5 </th>
                                  <th scope="col"> Cycle6 </th>
                                  <th scope="col"> Cycle7 </th>
                                  <th scope="col"> Cycle8 </th>
                                  <th scope="col"> Cycle9 </th>
                                  <th scope="col"> Cycle10 </th>
                                </tr>
                              </thead>
                              <tbody>
                                <tr>
                                    <th scope="row">Test Cycles</th>
                                    ${testResults.collect { result -> "<td style='text-align: center;'>${result == 'success' ? 'ðŸ”µ' : 'ðŸ”´'}</td>" }.join('')}
                                </tr>
                              </tbody>
                            </table>
                        """

                        // Send the email
                        emailext body: emailBody,
                            mimeType: 'text/html',
                            from: 'mayta51654944@gmail.com',
                            subject: 'Test Results',
                            to: 'mayta51654944@gmail.com'

                        // Check the result of the current build
                        def currentBuildResult = currentBuild.result
                        build job: currentBuild.fullProjectName
                    } else {
                        echo "Maximum recursive count reached. Stopping recursion."
                    }
                }
            }
        }
    }
}
